{"remainingRequest":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/babel-loader/lib/index.js!/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/src/store/store.js","dependencies":[{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/src/store/store.js","mtime":1558256363998},{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport state from \"./state\";\nimport web3Obj from \"../web3/getWeb3\";\nimport pollWeb3 from \"../web3/pollWeb3\";\nimport getExchangeContract from \"../web3/getExchangeContract\";\nVue.use(Vuex);\nexport var store = new Vuex.Store({\n  strict: true,\n  state: state,\n  mutations: {\n    registerWeb3Instance: function registerWeb3Instance(state, payload) {\n      console.log('registerWeb3Instace Mutation', payload);\n      var result = payload;\n      var web3_state = state.web3;\n      web3_state.coinbase = result.coinbase;\n      web3_state.networkId = result.networkId;\n      web3_state.balance = parseInt(result.balance, 10);\n      web3_state.isInjected = result.isInjected;\n      web3_state.web3Instance = result.web3;\n      state.web3 = web3_state; //  this.store.dispatch('pollWeb3')\n    },\n    pollWeb3Instance: function pollWeb3Instance(state, payload) {\n      console.log('pollWeb3Instance mutation being executed', payload);\n      state.web3.coinbase = payload.coinbase;\n      state.web3.balance = parseInt(payload.balance, 10);\n    },\n    registerExchangeContractInstance: function registerExchangeContractInstance(state, payload) {\n      console.log('Exchange account instace:', payload);\n\n      state.contractInstance = function () {\n        return payload;\n      };\n    }\n  },\n  actions: {\n    registerWeb3: function registerWeb3(_ref) {\n      var commit = _ref.commit;\n      console.log('Register Web3 Action being executed');\n      web3Obj.initWeb3().then(function (result) {\n        console.log('register web3 Instance', result);\n        commit('registerWeb3Instance', result);\n      }).catch(function (e) {\n        console.log('error in action registerWeb3', e);\n      });\n    },\n    pollWeb3: function pollWeb3(_ref2, payload) {\n      var commit = _ref2.commit;\n      console.log('pollWeb3 action being executed');\n      commit('pollWeb3Instance', payload);\n    },\n    getExchangeContractInstance: function getExchangeContractInstance(_ref3) {\n      var commit = _ref3.commit;\n      getExchangeContract().then(function (result) {\n        commit('registerExchangeContractInstance', result);\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    }\n  }\n});",{"version":3,"sources":["/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/src/store/store.js"],"names":["Vue","Vuex","state","web3Obj","pollWeb3","getExchangeContract","use","store","Store","strict","mutations","registerWeb3Instance","payload","console","log","result","web3_state","web3","coinbase","networkId","balance","parseInt","isInjected","web3Instance","pollWeb3Instance","registerExchangeContractInstance","contractInstance","actions","registerWeb3","commit","initWeb3","then","catch","e","getExchangeContractInstance"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport state from './state'\nimport web3Obj from '../web3/getWeb3'\nimport pollWeb3 from '../web3/pollWeb3'\n\nimport getExchangeContract from '../web3/getExchangeContract'\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n  strict: true,\n  state,\n  mutations: {\n    registerWeb3Instance(state, payload) {\n      console.log('registerWeb3Instace Mutation', payload)\n      let result = payload\n      let web3_state = state.web3\n      web3_state.coinbase = result.coinbase\n      web3_state.networkId = result.networkId\n      web3_state.balance = parseInt(result.balance, 10)\n      web3_state.isInjected = result.isInjected\n      web3_state.web3Instance = result.web3\n      state.web3 = web3_state\n      //  this.store.dispatch('pollWeb3')\n    },\n    pollWeb3Instance(state, payload) {\n      console.log('pollWeb3Instance mutation being executed', payload)\n      state.web3.coinbase = payload.coinbase\n      state.web3.balance = parseInt(payload.balance, 10)\n    },\n    registerExchangeContractInstance(state, payload) {\n      console.log('Exchange account instace:', payload)\n      state.contractInstance = () => payload\n    }\n  },\n  actions: {\n    registerWeb3 ({commit}) {\n      console.log('Register Web3 Action being executed')\n      web3Obj.initWeb3().then(result => {\n        console.log('register web3 Instance', result)\n        commit('registerWeb3Instance', result)\n      }).catch(e => {\n        console.log('error in action registerWeb3', e)\n      })\n    },\n    pollWeb3({commit}, payload) {\n      console.log('pollWeb3 action being executed')\n      commit('pollWeb3Instance', payload)\n    },\n    getExchangeContractInstance({commit}) {\n      getExchangeContract().then(result => {\n        commit('registerExchangeContractInstance', result)\n      }).catch(e => console.log(e))\n    }\n  }\n})\n"]}]}