{"remainingRequest":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/vuetify-loader/lib/loader.js!/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/src/components/RegisterName.vue?vue&type=template&id=90bfde04&","dependencies":[{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/src/components/RegisterName.vue","mtime":1558254874935},{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kennyhsieh/Documents/0x1 Blockchain/BCP/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticStyle: {\n        display: \"flex\",\n        \"flex-direction\": \"column\",\n        \"align-item\": \"center\",\n        \"justify-conter\": \"center\"\n      }\n    },\n    [\n      _c(\n        \"v-form\",\n        { staticStyle: { \"margin-bottom\": \"30px\", width: \"320px\" } },\n        [\n          _c(\"v-text-field\", {\n            directives: [\n              {\n                name: \"validate\",\n                rawName: \"v-validate\",\n                value: \"required|alpha_num|\",\n                expression: \"'required|alpha_num|'\"\n              }\n            ],\n            staticClass: \"input\",\n            attrs: {\n              \"data-vv-name\": \"id\",\n              \"error-messages\": _vm.errors.collect(\"id\"),\n              \"prepend-icon\": \"person\",\n              name: \"login\",\n              placeholder: \"BCP ID\",\n              type: \"text\",\n              color: \"cyan\",\n              required: \"\"\n            },\n            model: {\n              value: _vm.register.id,\n              callback: function($$v) {\n                _vm.$set(_vm.register, \"id\", $$v)\n              },\n              expression: \"register.id\"\n            }\n          }),\n          _c(\"v-text-field\", {\n            directives: [\n              {\n                name: \"validate\",\n                rawName: \"v-validate\",\n                value: \"required|min:6\",\n                expression: \"'required|min:6'\"\n              }\n            ],\n            staticClass: \"input\",\n            attrs: {\n              \"data-vv-name\": \"password\",\n              \"error-messages\": _vm.errors.collect(\"password\"),\n              \"prepend-icon\": \"lock\",\n              name: \"password\",\n              placeholder: \"Password\",\n              type: \"password\",\n              color: \"cyan\",\n              required: \"\"\n            },\n            model: {\n              value: _vm.register.password,\n              callback: function($$v) {\n                _vm.$set(_vm.register, \"password\", $$v)\n              },\n              expression: \"register.password\"\n            }\n          }),\n          _c(\"v-text-field\", {\n            directives: [\n              {\n                name: \"validate\",\n                rawName: \"v-validate\",\n                value: \"required|email\",\n                expression: \"'required|email'\"\n              }\n            ],\n            staticClass: \"input\",\n            attrs: {\n              \"data-vv-name\": \"email\",\n              \"error-messages\": _vm.errors.collect(\"email\"),\n              \"prepend-icon\": \"email\",\n              color: \"cyan\",\n              placeholder: \"Email\",\n              required: \"\"\n            },\n            model: {\n              value: _vm.register.email,\n              callback: function($$v) {\n                _vm.$set(_vm.register, \"email\", $$v)\n              },\n              expression: \"register.email\"\n            }\n          })\n        ],\n        1\n      ),\n      _c(\n        \"v-btn\",\n        { attrs: { color: \"info\", depressed: \"\" }, on: { click: _vm.submit } },\n        [_vm._v(\"continue\")]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}